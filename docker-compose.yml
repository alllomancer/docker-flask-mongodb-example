version: '3.8'

services:
    web-base-image:
        build:
            context: ./docker-python/base
            args:
                requirements: /root/flask-mongodb-example/python/requirements.txt
        image: web-base

    web-random:
        build:
            context: ./docker-python
            args:
                requirements: /root/flask-mongodb-example/python/requirements.txt
        image: web-standard
        ports:
            - "800:5000"
        entrypoint: python /root/flask-mongodb-example/python/random_demo.py
        depends_on:
            - mongodb
            - web-base-image

    web-users:
        build:
            context: ./docker-python
            args:
                requirements: /root/flask-mongodb-example/python/requirements.txt
        image: web-standard
        ports:
            - "81:5000"
        entrypoint: python /root/flask-mongodb-example/python/users.py
        depends_on:
            - mongodb
            - web-base-image

    background-mqtt:
        build:
            context: ./docker-python
            args:
                requirements: /root/flask-mongodb-example/python/requirements-mqtt.txt
        image: backgorund-mqtt-image
        entrypoint: python /root/flask-mongodb-example/python/mqtt.py
        environment:
            - MQTT_USER=/run/secrets/mqtt_user
            - MQTT_PASSWORD=/run/secrets/mqtt_password
            - PYTHONUNBUFFERED=1
        secrets:
            - mqtt_user
            - mqtt_password
        depends_on:
            - mongodb
            - mqtt
            - influxdb
        tty: true

    web-fulltext-search:
        build:
            context: ./docker-python
            args:
                requirements: /root/flask-mongodb-example/python/requirements.txt
        image: web-standard
        ports:
            - "82:5000"
        entrypoint: python /root/flask-mongodb-example/python/fulltext_search.py
        depends_on:
            - mongodb

    web-geolocation-search:
        build:
            context: ./docker-python
            args:
                requirements: /root/flask-mongodb-example/python/requirements.txt
        image: web-geolocation-image
        ports:
            - "83:5000"
        entrypoint: python /root/flask-mongodb-example/python/geolocation_search.py
        depends_on:
            - mongodb

    web-baesian:
        build:
            context: ./docker-python
            args:
                requirements: /root/flask-mongodb-example/python/requirements.txt
        image: web-standard
        ports:
            - "84:5000"
        entrypoint: python /root/flask-mongodb-example/python/baesian.py
        depends_on:
            - mongodb

    web-photo-process:
        build:
            context: ./docker-python
            args:
                requirements: /root/flask-mongodb-example/python/requirements-photo.txt
        image: web-photo-image
        ports:
            - "85:5000"
        entrypoint: python /root/flask-mongodb-example/python/photo_process.py
        volumes:
            - ./container-storage:/root/storage
        depends_on:
            - mongodb

    web-book-collection:
        build:
            context: ./docker-python
            args:
                requirements: /root/flask-mongodb-example/python/requirements-restplus.txt
        image: web-bookcollection-image
        environment:
             - PYTHONUNBUFFERED=1
        ports:
            - "86:5000"
        entrypoint: python /root/flask-mongodb-example/python/bookcollection.py
        depends_on:
            - mongodb
            - web-users

    web-users-fast-api:
        build:
            context: ./docker-python
            args:
                requirements: /root/flask-mongodb-example/python/requirements-fastapi.txt
        image: web-users-fastapi-image
        ports:
            - "88:5000" # port 87 is restricted in browsers
        entrypoint: uvicorn users-fastapi:app --reload --host 0.0.0.0 --port 5000
        depends_on:
            - mongodb

    influxdb:
        build: docker-influxdb
        env_file: configuration.env
        ports:
          - '8086:8086'
        volumes:
          - influxdb_data:/var/lib/influxdb

    grafana:
        build: docker-grafana
        env_file: configuration.env
        links:
          - influxdb
        ports:
          - '3000:3000'
        volumes:
          - grafana_data:/var/lib/grafana

    mongodb:
        image: mongo:4.2-bionic
        command:
        - --storageEngine
        - wiredTiger
        - --replSet
        - myrepl
        ports:
            - "27017:27017"

    mqtt:
        build:
          context: ./docker-mosquitto
        ports:
            - "1883:1883"

    krakend:
        image: devopsfaith/krakend
        volumes:
            - ./:/etc/krakend/
        configs:
          - krakend_config
        ports:
            - "8080:8080"

volumes:
    grafana_data: {}
    influxdb_data: {}

configs:
  krakend_config:
    file: ./krakend.json

secrets:
    mqtt_user:
        file: ./secrets/mqtt_user.txt
    mqtt_password:
        file: ./secrets/mqtt_pass.txt